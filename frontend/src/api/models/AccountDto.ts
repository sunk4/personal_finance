/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserDto } from './UserDto';
import {
    UserDtoFromJSON,
    UserDtoFromJSONTyped,
    UserDtoToJSON,
    UserDtoToJSONTyped,
} from './UserDto';

/**
 * 
 * @export
 * @interface AccountDto
 */
export interface AccountDto {
    /**
     * 
     * @type {string}
     * @memberof AccountDto
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof AccountDto
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AccountDto
     */
    updatedAt?: Date;
    /**
     * 
     * @type {UserDto}
     * @memberof AccountDto
     */
    user?: UserDto;
    /**
     * 
     * @type {string}
     * @memberof AccountDto
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof AccountDto
     */
    balance?: number;
    /**
     * 
     * @type {string}
     * @memberof AccountDto
     */
    accountType: AccountDtoAccountTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AccountDto
     */
    status: AccountDtoStatusEnum;
}


/**
 * @export
 */
export const AccountDtoAccountTypeEnum = {
    Savings: 'SAVINGS',
    Checking: 'CHECKING',
    Credit: 'CREDIT'
} as const;
export type AccountDtoAccountTypeEnum = typeof AccountDtoAccountTypeEnum[keyof typeof AccountDtoAccountTypeEnum];

/**
 * @export
 */
export const AccountDtoStatusEnum = {
    Active: 'ACTIVE',
    Inactive: 'INACTIVE',
    Closed: 'CLOSED'
} as const;
export type AccountDtoStatusEnum = typeof AccountDtoStatusEnum[keyof typeof AccountDtoStatusEnum];


/**
 * Check if a given object implements the AccountDto interface.
 */
export function instanceOfAccountDto(value: object): value is AccountDto {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('accountType' in value) || value['accountType'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function AccountDtoFromJSON(json: any): AccountDto {
    return AccountDtoFromJSONTyped(json, false);
}

export function AccountDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
        'user': json['user'] == null ? undefined : UserDtoFromJSON(json['user']),
        'name': json['name'],
        'balance': json['balance'] == null ? undefined : json['balance'],
        'accountType': json['accountType'],
        'status': json['status'],
    };
}

export function AccountDtoToJSON(json: any): AccountDto {
    return AccountDtoToJSONTyped(json, false);
}

export function AccountDtoToJSONTyped(value?: AccountDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
        'user': UserDtoToJSON(value['user']),
        'name': value['name'],
        'balance': value['balance'],
        'accountType': value['accountType'],
        'status': value['status'],
    };
}

