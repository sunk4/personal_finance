/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RecurringTransactionDto,
} from '../models/index';
import {
    RecurringTransactionDtoFromJSON,
    RecurringTransactionDtoToJSON,
} from '../models/index';

export interface CreateRecurringTransactionRequest {
    recurringTransactionDto: RecurringTransactionDto;
}

export interface DeleteRecurringTransactionRequest {
    recurringTransactionId: string;
}

export interface GetRecurringTransactionRequest {
    recurringTransactionId: string;
}

export interface GetRecurringTransactionsRequest {
    name?: string;
}

export interface UpdateRecurringTransactionRequest {
    recurringTransactionId: string;
    recurringTransactionDto: RecurringTransactionDto;
}

/**
 * 
 */
export class RecurringTransactionControllerApi extends runtime.BaseAPI {

    /**
     */
    async createRecurringTransactionRaw(requestParameters: CreateRecurringTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['recurringTransactionDto'] == null) {
            throw new runtime.RequiredError(
                'recurringTransactionDto',
                'Required parameter "recurringTransactionDto" was null or undefined when calling createRecurringTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/recurring-transactions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RecurringTransactionDtoToJSON(requestParameters['recurringTransactionDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createRecurringTransaction(requestParameters: CreateRecurringTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createRecurringTransactionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteRecurringTransactionRaw(requestParameters: DeleteRecurringTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['recurringTransactionId'] == null) {
            throw new runtime.RequiredError(
                'recurringTransactionId',
                'Required parameter "recurringTransactionId" was null or undefined when calling deleteRecurringTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/recurring-transactions/{recurringTransactionId}`.replace(`{${"recurringTransactionId"}}`, encodeURIComponent(String(requestParameters['recurringTransactionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteRecurringTransaction(requestParameters: DeleteRecurringTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRecurringTransactionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getRecurringTransactionRaw(requestParameters: GetRecurringTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecurringTransactionDto>> {
        if (requestParameters['recurringTransactionId'] == null) {
            throw new runtime.RequiredError(
                'recurringTransactionId',
                'Required parameter "recurringTransactionId" was null or undefined when calling getRecurringTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/recurring-transactions/{recurringTransactionId}`.replace(`{${"recurringTransactionId"}}`, encodeURIComponent(String(requestParameters['recurringTransactionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecurringTransactionDtoFromJSON(jsonValue));
    }

    /**
     */
    async getRecurringTransaction(requestParameters: GetRecurringTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecurringTransactionDto> {
        const response = await this.getRecurringTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRecurringTransactionsRaw(requestParameters: GetRecurringTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RecurringTransactionDto>>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/recurring-transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RecurringTransactionDtoFromJSON));
    }

    /**
     */
    async getRecurringTransactions(requestParameters: GetRecurringTransactionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RecurringTransactionDto>> {
        const response = await this.getRecurringTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRecurringTransactionsSumRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/recurring-transactions/sum`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getRecurringTransactionsSum(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.getRecurringTransactionsSumRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updateRecurringTransactionRaw(requestParameters: UpdateRecurringTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['recurringTransactionId'] == null) {
            throw new runtime.RequiredError(
                'recurringTransactionId',
                'Required parameter "recurringTransactionId" was null or undefined when calling updateRecurringTransaction().'
            );
        }

        if (requestParameters['recurringTransactionDto'] == null) {
            throw new runtime.RequiredError(
                'recurringTransactionDto',
                'Required parameter "recurringTransactionDto" was null or undefined when calling updateRecurringTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/recurring-transactions/{recurringTransactionId}`.replace(`{${"recurringTransactionId"}}`, encodeURIComponent(String(requestParameters['recurringTransactionId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RecurringTransactionDtoToJSON(requestParameters['recurringTransactionDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateRecurringTransaction(requestParameters: UpdateRecurringTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateRecurringTransactionRaw(requestParameters, initOverrides);
    }

}
