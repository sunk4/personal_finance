/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddWithdrawMoneyFromGoalDto,
  GoalsDto,
} from '../models/index';
import {
    AddWithdrawMoneyFromGoalDtoFromJSON,
    AddWithdrawMoneyFromGoalDtoToJSON,
    GoalsDtoFromJSON,
    GoalsDtoToJSON,
} from '../models/index';

export interface AddAmountRequest {
    goalId: string;
    addWithdrawMoneyFromGoalDto: AddWithdrawMoneyFromGoalDto;
}

export interface CreateGoalRequest {
    goalsDto: GoalsDto;
}

export interface DeleteGoalRequest {
    goalId: string;
}

export interface GetGoalRequest {
    goalId: string;
}

export interface UpdateGoalRequest {
    goalId: string;
    goalsDto: GoalsDto;
}

/**
 * 
 */
export class GoalsControllerApi extends runtime.BaseAPI {

    /**
     */
    async addAmountRaw(requestParameters: AddAmountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['goalId'] == null) {
            throw new runtime.RequiredError(
                'goalId',
                'Required parameter "goalId" was null or undefined when calling addAmount().'
            );
        }

        if (requestParameters['addWithdrawMoneyFromGoalDto'] == null) {
            throw new runtime.RequiredError(
                'addWithdrawMoneyFromGoalDto',
                'Required parameter "addWithdrawMoneyFromGoalDto" was null or undefined when calling addAmount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/goals/{goalId}/add-amount`.replace(`{${"goalId"}}`, encodeURIComponent(String(requestParameters['goalId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AddWithdrawMoneyFromGoalDtoToJSON(requestParameters['addWithdrawMoneyFromGoalDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addAmount(requestParameters: AddAmountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addAmountRaw(requestParameters, initOverrides);
    }

    /**
     */
    async createGoalRaw(requestParameters: CreateGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['goalsDto'] == null) {
            throw new runtime.RequiredError(
                'goalsDto',
                'Required parameter "goalsDto" was null or undefined when calling createGoal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/goals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoalsDtoToJSON(requestParameters['goalsDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createGoal(requestParameters: CreateGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createGoalRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteGoalRaw(requestParameters: DeleteGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['goalId'] == null) {
            throw new runtime.RequiredError(
                'goalId',
                'Required parameter "goalId" was null or undefined when calling deleteGoal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/goals/{goalId}`.replace(`{${"goalId"}}`, encodeURIComponent(String(requestParameters['goalId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteGoal(requestParameters: DeleteGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteGoalRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getGoalRaw(requestParameters: GetGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GoalsDto>> {
        if (requestParameters['goalId'] == null) {
            throw new runtime.RequiredError(
                'goalId',
                'Required parameter "goalId" was null or undefined when calling getGoal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/goals/{goalId}`.replace(`{${"goalId"}}`, encodeURIComponent(String(requestParameters['goalId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GoalsDtoFromJSON(jsonValue));
    }

    /**
     */
    async getGoal(requestParameters: GetGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GoalsDto> {
        const response = await this.getGoalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGoalsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GoalsDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/goals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GoalsDtoFromJSON));
    }

    /**
     */
    async getGoals(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GoalsDto>> {
        const response = await this.getGoalsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updateGoalRaw(requestParameters: UpdateGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['goalId'] == null) {
            throw new runtime.RequiredError(
                'goalId',
                'Required parameter "goalId" was null or undefined when calling updateGoal().'
            );
        }

        if (requestParameters['goalsDto'] == null) {
            throw new runtime.RequiredError(
                'goalsDto',
                'Required parameter "goalsDto" was null or undefined when calling updateGoal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/goals/{goalId}`.replace(`{${"goalId"}}`, encodeURIComponent(String(requestParameters['goalId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GoalsDtoToJSON(requestParameters['goalsDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateGoal(requestParameters: UpdateGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateGoalRaw(requestParameters, initOverrides);
    }

}
