/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BudgetDto,
} from '../models/index';
import {
    BudgetDtoFromJSON,
    BudgetDtoToJSON,
} from '../models/index';

export interface CreateBudgetRequest {
    budgetDto: BudgetDto;
}

export interface DeleteBudgetRequest {
    budgetId: string;
}

export interface RemoveAmountRequest {
    budgetId: string;
    budgetDto: BudgetDto;
}

export interface UpdateBudgetRequest {
    budgetId: string;
    budgetDto: BudgetDto;
}

/**
 * 
 */
export class BudgetControllerApi extends runtime.BaseAPI {

    /**
     */
    async createBudgetRaw(requestParameters: CreateBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['budgetDto'] == null) {
            throw new runtime.RequiredError(
                'budgetDto',
                'Required parameter "budgetDto" was null or undefined when calling createBudget().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/budget`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BudgetDtoToJSON(requestParameters['budgetDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createBudget(requestParameters: CreateBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createBudgetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteBudgetRaw(requestParameters: DeleteBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['budgetId'] == null) {
            throw new runtime.RequiredError(
                'budgetId',
                'Required parameter "budgetId" was null or undefined when calling deleteBudget().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/budget/{budgetId}`.replace(`{${"budgetId"}}`, encodeURIComponent(String(requestParameters['budgetId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteBudget(requestParameters: DeleteBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBudgetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getBudgetsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BudgetDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/budget`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BudgetDtoFromJSON));
    }

    /**
     */
    async getBudgets(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BudgetDto>> {
        const response = await this.getBudgetsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async removeAmountRaw(requestParameters: RemoveAmountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['budgetId'] == null) {
            throw new runtime.RequiredError(
                'budgetId',
                'Required parameter "budgetId" was null or undefined when calling removeAmount().'
            );
        }

        if (requestParameters['budgetDto'] == null) {
            throw new runtime.RequiredError(
                'budgetDto',
                'Required parameter "budgetDto" was null or undefined when calling removeAmount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/budget/{budgetId}/remove-amount`.replace(`{${"budgetId"}}`, encodeURIComponent(String(requestParameters['budgetId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BudgetDtoToJSON(requestParameters['budgetDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeAmount(requestParameters: RemoveAmountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeAmountRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateBudgetRaw(requestParameters: UpdateBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['budgetId'] == null) {
            throw new runtime.RequiredError(
                'budgetId',
                'Required parameter "budgetId" was null or undefined when calling updateBudget().'
            );
        }

        if (requestParameters['budgetDto'] == null) {
            throw new runtime.RequiredError(
                'budgetDto',
                'Required parameter "budgetDto" was null or undefined when calling updateBudget().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/budget/{budgetId}`.replace(`{${"budgetId"}}`, encodeURIComponent(String(requestParameters['budgetId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BudgetDtoToJSON(requestParameters['budgetDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateBudget(requestParameters: UpdateBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateBudgetRaw(requestParameters, initOverrides);
    }

}
